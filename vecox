#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  VeCox
#
#  Copyright 2012 Christian Schramm <christian.h.m.schramm@gmail.com>
#
#  This software is released under the terms of the GNU LESSER PUBLIC
#  LICENSE (LGPL) Version 3.0, see LICENSE.
#

import argparse

from src import commands
from src import vecox

def main():
    parser = argparse.ArgumentParser(description='vecox is an xml and html revision control software.')
    subparsers = parser.add_subparsers()

    parser_init = subparsers.add_parser("init", help="Initializes vecox for this directory and its subdirectories. Note that no files are added.")
    parser_init.set_defaults(func=commands.init)
    parser_init.add_argument("--backend", default="file", help="The storage backend, default: file")

    parser_save = subparsers.add_parser("save", help="Save current revision of file(s).")
    parser_save.set_defaults(func=commands.save)
    parser_save.add_argument("filenames", metavar="file", nargs="+", help="the file(s) to save")
    parser_save.add_argument("--backend", default="file", help="the storage backend, default: file")
    parser_save.add_argument("--filetype", default="auto", help="the parsing method, default: auto", choices=["auto", "xml", "hmtl"])
    parser_save.add_argument("--message", "-m", default="", help="the commit message")

    parser_history = subparsers.add_parser("history", help="show history of files")
    parser_history.set_defaults(func=commands.history)
    parser_history.add_argument("filenames", metavar="file", nargs="+", help="the file(s) to inspect history")
    parser_history.add_argument("--backend", default="file", help="the storage backend, default: file")

    parser_revision = subparsers.add_parser("revision", help="set a file to a given revision")
    parser_revision.set_defaults(func=commands.revision)
    parser_revision.add_argument("filename", metavar="file", help="the file to change revision")
    parser_revision.add_argument("hash", help="the revision hash")
    parser_revision.add_argument("--backend", default="file", help="the storage backend, default: file")
    parser_revision.add_argument("--force", "-f", action="store_true", default=False, help="force setting revision")

    args = parser.parse_args()
    try:
        args.func(args)
    except vecox.vecoxError as e:
        print("\033[91m" + "Error:" + "\033[0m", e.message)

    return 0

if __name__ == '__main__':
    main()

